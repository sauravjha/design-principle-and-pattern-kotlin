/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */


plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()

    // add Spek 2 development repository
    maven { url "https://dl.bintray.com/spekframework/spek-dev" }
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    // Kotlin-Logging
    implementation 'io.github.microutils:kotlin-logging-jvm:2.0.11'

    // include JUnit 5 assertions
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    // include Spek 2 library
    testImplementation 'org.spekframework.spek2:spek-dsl-jvm:2.0.12'
    testImplementation 'org.spekframework.spek2:spek-runtime-jvm:2.0.12'

    // include JUnit 5 test engine
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

    // include Spek 2 JUnit test engine
    testRuntimeOnly 'org.spekframework.spek2:spek-runner-junit5:2.0.12'
}

application {
    // Define the main class for the application.
    mainClassName = 'AppKt'
}

// configure test task to use Spek 2 test engine with JUnit
test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging {
        events "failed", "skipped", "standard_error", "standard_out"
        showCauses true
        showExceptions true
        showStackTraces true
    }
    //ref: https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
    afterSuite { desc, result ->
        if (!desc.parent)
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }
}

// set JVM target to 1.8 for all compilation tasks
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}